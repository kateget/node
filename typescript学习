该文为学习总结与简述
-------------------------------------------------------------------------
1.typescript 安装
npm install typescript -g
-------------------------------------------------------------------------
2.ts-node 安装与使用
npm install -g ts-node
运行ts代码
ts-node Demo1.ts
-------------------------------------------------------------------------
参考技术胖文章---https://juejin.im/post/6876240277208563720
基础：
== 1.常量
const count: number = 1
== 自定义静态类型
interface XiaoJieJie {
  uname: string;
  age: number;
}

const xiaohong: XiaoJieJie = {
  uname: "小红",
  age: 18,
};
== 2.对象类型
== 2.1对象类型
const teacher: {
    userName: string,
    age: number
} = {
    userName: 'demo',
    age: 18
}
== 2.2数组
const arr: string[] = ['demo1','demo2'] // 必须是字符串的数组
== 2.3类的形式定义变量
const Person {}
const demo: Person = new Person();
== 2.4函数类型定义变量
const demo: () => string = () => {
  return "大脚";
};
-------------------------------------------------------------------------
类型注解和类型推断
let count: number
count = 1
明确指出当前类型为数字，这种就叫类型注解
let count = 123
把鼠标放上去，ts把变量注释为数字类型，这种就是类型推断
-------------------------------------------------------------------------
函数返回和返回类型定义
== 1.简单类型定义
function getTotal(one: number, two: number): number {
  return one + two;
}

const total = getTotal(1, 2);
设置返回值类型
== 2.函数无返回值时定义方法
function sayHello(): void {
  console.log("hello world");
}
如果这样定义后，你再加入任何返回值，程序都会报错。
== never 返回值类型
如果一个函数是永远也执行不完的，就可以定义返回值为never，那什么样的函数是永远也执行不完的那?我们先来写一个这样的函数(比如执行执行的时候，抛出了异常，这时候就无法执行完了)。
function errorFuntion(): never {
  throw new Error();
  console.log("Hello World");
}
还有一种是一直循环，也是我们常说的死循环，这样也运行不完，比如下面的代码：
function forNever(): never {
  while (true) {}
  console.log("Hello JSPang");
}
== 函数参数为对象(解构)时
function add({ one: number, two: number }) {
  return one + two;
}

const total = add({ one: 1, two: 2 });
这种写法是错误的
*******
正确写法：
function add({ one, two }: { one: number, two: number }): number {
  return one + two;
}

const three = add({ one: 1, two: 2 })

function getNumber({ one }: { one: number }): number {
  return one;
}

const one = getNumber({ one: 1 });
-------------------------------------------------------------------------
TypeScript 中数组类型的定义
== 1.一般数组类型的定义
const numberArr = [1, 2, 3];
这个时候类型是ts自己推断出来的
const numberArr: number[] = [1, 2, 3];
== 2.多类型数组
const arr: (number | string)[] = [1, "string", 2];
== 3.数组中对象类型的定义
3.1 类型别名
type Lady = { name: string, age: Number }; 类型别名必须以type开头
或者： class Lady = { name: string, age: Number }; 用类定义也是可以的，效果与别名一样

const xiaoJieJies: Lady[] = [
  { name: "刘英", age: 18 },
  { name: "谢大脚", age: 28 },
];
3.2 元组的基本应用
const xiaojiejie: (string | number)[] = ["dajiao", 28, "teacher"];
普通数组，并不能区分每个位置的元素类型,即使这样写，依然不会报错
const xiaojiejie: [string, string, number] = ["dajiao", "teacher", 28];
元组能很好的限制相应位置的元素类别，如果需要使用严谨的结构，可以使用元组
-------------------------------------------------------------------------
TypeScript 中的 interface 接口
== 1.Interface 接口初步了解
重复的注解可以提出来写出一个接口
interface Girl {
  name: string;
  age: number;
  bust: number;
}
const screenResume = (girl: Girl) => {
  girl.age < 24 && girl.bust >= 90 && console.log(girl.name + "进入面试");
  girl.age > 24 || (girl.bust < 90 && console.log(girl.name + "你被淘汰"));
};

const getResume = (girl: Girl) => {
  console.log(girl.name + "年龄是：" + girl.age);
  console.log(girl.name + "胸围是：" + girl.bust);
};
const girl = {
  name: "大脚",
  age: 18,
  bust: 94,
};

screenResume(girl);
getResume(girl);
== 2.接口和类型别名的区别
类型别名可以直接给类型，比如string，而接口必须代表对象。
例如：
别名---
type Girl1 = stirng;
接口---只能写成
const girl = {
  name: "大脚",
  age: 18,
  bust: 94,
};
== 3.接口非必选值得定义
interface Girl {
  name: string;
  age: number;
  bust: number;
  waistline?: number;
}
waistline 就为可选值
== 4.允许加入任意值
interface Girl {
  name: string;
  age: number;
  bust: number;
  waistline?: number;
  [propname: string]: any;
}
意思：属性的名称是字符串，值为任意类型
const girl = {
  name: "大脚",
  age: 18,
  bust: 94,
  waistline: 21,
  sex: "女",
};
相应的对象可以为上述
== 5.接口里的方法
interface Girl {
  name: string;
  age: number;
  bust: number;
  waistline?: number;
  [propname: string]: any;
  say(): string;
}
== 6.接口和类的约束
class XiaoJieJie implements Girl {}
这样写会报错，需要把类写完整点
class XiaoJieJie implements Girl {
  name = "刘英";
  age = 18;
  bust = 90;
  say() {
    return "欢迎光临 ，红浪漫洗浴！！";
  }
}
== 7.接口继承
interface Teacher extends Girl {
  teach(): string;
}
-------------------------------------------------------------------------
TypeScript 中类的概念和使用

== 1.类的基本使用
class Lady {
  content = "Hi，帅哥";
  sayHello() {
    return this.content;
  }
}

const goddess = new Lady();
console.log(goddess.sayHello());
== 2.类的继承
class Lady {
  content = "Hi，帅哥";
  sayHello() {
    return this.content;
  }
}
class XiaoJieJie extends Lady {
  sayLove() {
    return "I love you";
  }
}

const goddess = new XiaoJieJie();
console.log(goddess.sayHello());
console.log(goddess.sayLove());

== 3.类的重写
class XiaoJieJie extends Lady {
  sayLove() {
    return "I love you!";
  }
  sayHello() {
    return "Hi , honey!";
  }
}
== 4.super 关键字的使用
super代表父类的方法
class XiaoJieJie extends Lady {
  sayLove() {
    return "I love you!";
  }
  sayHello() {
    return super.sayHello() + "。你好！";
  }
}
-------------------------------------------------------------------------
TypeScript 中类的访问类型
1.public
2.private
3.protected
-------------------------------------------------------------------------
TypeScript 类的构造函数

1.类的构造函数
class Person{
    constructor(public name:string){
    }
}

const person= new Person('jspang')
console.log(person.name)
构造函数定义后，赋值
2.类继承中的构造器写法
子类如果有构造函数就必须用super调用父元素的构造函数
class Person{}

class Teacher extends Person{
    constructor(public age:number){
        super()
    }
}

const teacher = new Teacher(18)
console.log(teacher.age)

-------------------------------------------------------------------------
TypeScript 类的 Getter、Setter 和 static 使用

== 1.类的 Getter 和 Setter
类中似有属性只能通过getter和setter来获取与设置
class Xiaojiejie {
  constructor(private _age:number){}
  get age(){
      return this._age-10
  }
  set age(age:number){
    this._age=age
  }
}

const dajiao = new Xiaojiejie(28)
dajiao.age=25
console.log(dajiao.age)
== 2.类中的 static
class Girl {
  static sayLove() {
    return "I Love you";
  }
}
console.log(Girl.sayLove());
静态方法可以通过方法直接调用
-------------------------------------------------------------------------
类的只读属性和抽象类

== 1.类里的只读属性 readonly

class Person {
    public readonly _name :string;
    constructor(name:string ){
        this._name = name;
    }
}

const person = new Person('jspang')
person._name= '谢广坤' //报错
console.log(person._name)

只读属性，只能读取，不能更改，否者会报错

== 2.抽象类的使用
// 抽象类开头关键字为 abstract 
abstract class Girl{
    abstract skill()  //因为没有具体的方法，所以我们这里不写括号

}

class Waiter extends Girl{
    skill(){
        console.log('大爷，请喝水！')
    }
}

class BaseTeacher extends Girl{
    skill(){
        console.log('大爷，来个泰式按摩吧！')
    }
}

class seniorTeacher extends Girl{
    skill(){
        console.log('大爷，来个SPA全身按摩吧！')
    }
}

-------------------------------------------------------------------------
配置文件-初识 tsconfig.json
== 1.生成 tsconfig.json 文件
通过命令" tsc --init " 生成 tsconfig.json 配置文件
tsc demo.ts 运行文件会生成编译后的js文件,这个时候tsconfig.json不会起作用，运行tsc后，配置文件才会生效
ts-node 只运行，不编译
== 2.include 、exclude 和 files
使用include
{
  "include":["demo.ts"],
  "compilerOptions": {
      //any something
      //........
  }
}

这样引入后，编译的时候就只会编译demo.ts文件
使用exclude(不包括)
{
   "exclude":["demo2.ts"],
  "compilerOptions": {
      //any something
      //........
  }
}
效果同样不引入demo2.ts
使用files
效果等同include
-------------------------------------------------------------------------
配置文件-初识 compilerOptions 配置项
ts文件编译配置项
== 1.removeComments 属性
移除注释
== 2.strict 属性
开启严格模式
== 3.noImplicitAny 属性
允许你的注解类型any不用特意表明
你可以简单的理解为，设置为 true，就是必须明确置顶 any 类型的值。
== 4.strictNullChecks 属性
不强制检查 NULL 类型。
const jspang: string = null;
开的时候是会报错的
== 5.ts-node 遵循 tsconfig.js 文件
tsc fileName 是没办法遵循tsconfig.js文件的，ts-node遵循
-------------------------------------------------------------------------
配置文件- compilerOptions 配置内容详解
== 1.rootDir 和 outDir
{
    "outDir": "./build" ,   指定编译后的文件所处位置
    "rootDir": "./src" ,    指定需要编译的文件所处位置
}
== 2.编译 ES6 语法到 ES5 语法-allowJs
"target":'es5' ,  // 这一项默认是开启的，你必须要保证它的开启，才能转换成功
"allowJs":true,   // 这个配置项的意思是联通
这两项都开启后，在使用tsc编译时，就会编译js文件了。
== 2.sourceMap 属性
如果把sourceMap的注释去掉，在打包的过程中就会给我们生成sourceMap文件.
== 3.noUnusedLocals 和 noUnusedParameters
noUnusedLocals：true，开启后我们的程序会直接给我们提示不能这样编写代码，有没有使用的变量。
noUnusedParameters是针对于名优使用的函数的，方法和noUnusedLocals：true一样
-------------------------------------------------------------------------
联合类型和类型保护
function judgeWho(animal: Waiter | Teacher) {
  animal.say();
}
上面的就是联合类型(用 | 类型既有可能是waiter也有可能是teacher)
== 1.类型保护-类型断言
interface Waiter {
  anjiao: boolean;
  say: () => {};
}

interface Teacher {
  anjiao: boolean;
  skill: () => {};
}

function judgeWho(animal: Waiter | Teacher) {
  if (animal.anjiao) {
    (animal as Teacher).skill();
  }else{
    (animal as Waiter).say();
  }
}

== 2.类型保护-in 语法
用if作类型保护，判断方法在animal中存不存在，存在调用方法skill
function judgeWhoTwo(animal: Waiter | Teacher) {
  if ("skill" in animal) {
    animal.skill();
  } else {
    animal.say();
  }
}
== 3.类型保护-typeof 语法
function add(first: string | number, second: string | number) {
  if (typeof first === "string" || typeof second === "string") {
    return `${first}${second}`;
  }
  return first + second;
}
== 4.类型保护-instanceof 语法
function addObj(first: object | NumberObj, second: object | NumberObj) {
  if (first instanceof NumberObj && second instanceof NumberObj) {
    return first.count + second.count;
  }
  return 0;
}
-------------------------------------------------------------------------
Enum 枚举类型讲解
== 1.枚举类型的对应值
默认从0开始,从1开始，可以这样写
enum Status {
  MASSAGE = 1,
  SPA,
  DABAOJIAN,
}
console.log(Status.MASSAGE);
console.log(Status.SPA);
console.log(Status.DABAOJIAN);
结果分别是1，2，3
== 2.枚举通过下标反查
console.log(Status.MASSAGE, Status[1]);
通过枚举下标，拿到枚举的值
-------------------------------------------------------------------------
TypeScript 函数泛型-难点
== 1.初始泛型概念-generic
泛型：[generic - 通用、泛指的意思],那最简单的理解，泛型就是泛指的类型。
泛型的定义使用<>（尖角号）进行定义的
function join<JSPang>(first: JSPang, second: JSPang) {
  return `${first}${second}`;
}
join < string > ("jspang", ".com");
join < number > (1, 2);
== 2.泛型中数组的使用
function myFun<ANY>(params: ANY[]) {
  return params;
}
myFun < string > ["123", "456"];
另一种写法
function myFun<ANY>(params: Array<ANY>) {
  return params;
}
myFun < string > ["123", "456"];
== 3.多个泛型的定义
function join<T, P>(first: T, second: P) {
  return `${first}${second}`;
}
join < number, string > (1, "2");
== 4.泛型的类型推断
function join<T, P>(first: T, second: P) {
  return `${first}${second}`;
}
join(1, "2");
-------------------------------------------------------------------------
TypeScript 类中泛型-难点
== 1.初始类的泛型
class SelectGirl<T> {
  constructor(private girls: T[]) {}
  getGirl(index: number): T {
    return this.girls[index];
  }
}

const selectGirl = new SelectGirl() < string > ["大脚", "刘英", "晓红"];
console.log(selectGirl.getGirl(1));
== 2.泛型中的继承
interface Girl {
  name: string;
}
class SelectGirl<T extends Girl> {
 ...
}
这句代码的意思是泛型里必须有一个name属性，因为它继承了Girl接口。
现在程序还是报错的，因为我们getGirl方法的返回类型还不对，这时候应该是一个string类型才对，所以代码应该改为下面的样子：
interface Girl {
  name: string;
}

class SelectGirl<T extends Girl> {
  constructor(private girls: T[]) {}
  getGirl(index: number): string {
    return this.girls[index].name;
  }
}

const selectGirl = new SelectGirl([
  { name: "大脚" },
  { name: "刘英" },
  { name: "晓红" },
]);
console.log(selectGirl.getGirl(1));
== 3.
泛型约束
class SelectGirl<T extends number | string> {
  //.....
}

限定类型只能为number和string
-------------------------------------------------------------------------
初识命名空间-Namespace
== 1.搭建浏览器开发环境步骤
1. 建立好文件夹后，打开 VSCode，把文件夹拉到编辑器当中，然后打开终端，运行npm init -y,创建package.json文件。
2. 生成文件后，我们接着在终端中运行tsc -init,生成tsconfig.json文件。
3. 新建src和build文件夹，再建一个index.html文件。
4. 在src目录下，新建一个page.ts文件，这就是我们要编写的ts文件了。
5. 配置tsconfig.json文件，设置outDir和rootDir(在 15 行左右)，也就是设置需要编译的文件目录，和编译好的文件目录。
6. 然后编写index.html，引入<script src="./build/page.js"></script>,当让我们现在还没有page.js文件。
7. 编写page.ts文件，加入一句输出console.log('jspang.com'),再在控制台输入tsc,就会生成page.js文件
8. 再到浏览器中查看index.html文件，如果按F12可以看到jspang.com，说明我们的搭建正常了。

== 2.没有命名空间时的问题
为了你更好的理解，先写一下这样代码，用类的形式在index.html中实现header,content和Footer部分，类似我们常说的模板。

class Header {
  constructor() {
    const elem = document.createElement("div");
    elem.innerText = "This is Header";
    document.body.appendChild(elem);
  }
}

class Content {
  constructor() {
    const elem = document.createElement("div");
    elem.innerText = "This is Content";
    document.body.appendChild(elem);
  }
}

class Footer {
  constructor() {
    const elem = document.createElement("div");
    elem.innerText = "This is Footer";
    document.body.appendChild(elem);
  }
}

class Page {
  constructor() {
    new Header();
    new Content();
    new Footer();
  }
}
页面引入
<body>
  <script>new Page();</script>
</body>

== 3.命名空间的使用
namespace Home {
  class Header {
    constructor() {
      const elem = document.createElement("div");
      elem.innerText = "This is Header";
      document.body.appendChild(elem);
    }
  }

  class Content {
    constructor() {
      const elem = document.createElement("div");
      elem.innerText = "This is Content";
      document.body.appendChild(elem);
    }
  }

  class Footer {
    constructor() {
      const elem = document.createElement("div");
      elem.innerText = "This is Footer";
      document.body.appendChild(elem);
    }
  }

  export class Page {
    constructor() {
      new Header();
      new Content();
      new Footer();
    }
  }
}

-------------------------------------------------------------------------
深入命名空间-Namespace
== 1.用命名空间实现组件化
后续代码过多，清参考js胖连接文章
-------------------------------------------------------------------------
用 Parcel 打包 TypeScript 代码
== 1.建立一个新项目
1. 教学需要，这里我们重新建立一个项目TSTest,在桌面新建立一个文件夹，然后在VSCode中打开。
2. 打开终端，输入npm init -y,创建package.json文件
3. 在终端中输入tsc --init,创建tsconfig.json文件
4. 修改tsconfig.json配置rootDir和outDir.
5. 新建src文件夹，在里边建立index.html,page.ts文件
6. 编写index.html文件，并引入page.ts文件
7. 编写page.ts文件
== 2.Parcel 的安装和使用
yarn add --dev parcel@next

{

  "scripts": {
    "test": "parcel ./src/index.html"
  },
}

yarn test
生成地址
